{"version":3,"sources":["state/types.ts","components/Light/Light.tsx","state/constants.ts","state/machine.ts","components/TrafficLight/TrafficLight.tsx","state/utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TrafficState","LightType","LightColour","LightState","Transition","lightContainerCSS","bgColor","type","state","css","pedestrian","on","Light","colour","TRANSITION","toggle","crossRoads","Machine","id","initial","stopped","states","flowing","stopping","TrafficLightCSS","ButtonCSS","TrafficLight","useMachine","trafficState","onTransition","value","redState","off","orangeState","greenState","mapTrafficStateToTrafficLightState","red","traffic","orange","green","onClick","event","PedestrianLightCSS","PedestrianLight","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAAYA,EAYAC,EAKAC,EAMAC,E,yRAvBAH,K,kBAAAA,E,oBAAAA,E,mBAAAA,M,cAYAC,K,kBAAAA,E,yBAAAA,M,cAKAC,K,UAAAA,E,gBAAAA,E,eAAAA,M,cAMAC,K,QAAAA,E,oBAAAA,E,WAAAA,M,KCbZ,ICVKC,EDUCC,EAAoB,SAAC,GAAD,IACxBC,EADwB,EACxBA,QACAC,EAFwB,EAExBA,KACAC,EAHwB,EAGxBA,MAHwB,OAQpBC,YARqB,IASRF,IAASN,EAAUS,WAAa,EAAI,KAC1CF,IAAUL,EAAWQ,GAAK,IAAM,GAIvBL,IAGTM,EAAQ,SAAC,GAAyC,IAAvCJ,EAAsC,EAAtCA,MAAOD,EAA+B,EAA/BA,KAAMM,EAAyB,EAAzBA,OACnC,OAAO,mBAAKJ,IAAKJ,EAAkB,CAAEC,QAASO,EAAQN,OAAMC,a,kCC5BzDJ,K,qBAAAA,M,KAGE,I,EAAMU,EAAaV,EAAWW,OCCxBC,EAAaC,YAAQ,CAChCC,GAAI,aACJC,QAASnB,EAAaoB,QACtBC,QAAM,mBACHrB,EAAaoB,QAAU,CACtBT,GAAG,eAAIG,EAAad,EAAasB,WAF/B,cAIHtB,EAAasB,QAAU,CACtBX,GAAG,eAAIG,EAAad,EAAauB,YAL/B,cAOHvB,EAAauB,SAAW,CACvBZ,GAAG,eACAG,EAAad,EAAaoB,WAT3B,K,wcCWR,IAAMI,EAAkBf,YAAH,KAOfgB,EAAYhB,YAAH,KAUFiB,EAAe,SAAC,GAAiC,IAA/BnB,EAA8B,EAA9BA,KAA8B,EACtBoB,qBACnCX,GAFyD,mBACpDY,EADoD,KACtCC,EADsC,KAK3D,GAAItB,IAASN,EAAUS,WACrB,OAAO,YAAC,EAAD,MANkD,MChCX,SAChDkB,GACuB,IACfE,EAAUF,EAAVE,MACR,MAAO,CACLC,SAAUD,IAAU9B,EAAaoB,QAAUjB,EAAWQ,GAAKR,EAAW6B,IACtEC,YACEH,IAAU9B,EAAauB,SAAWpB,EAAWQ,GAAKR,EAAW6B,IAC/DE,WAAYJ,IAAU9B,EAAasB,QAAUnB,EAAWQ,GAAKR,EAAW6B,KDqCtEG,CAAmCP,GAHrCG,EAVyD,EAUzDA,SACAE,EAXyD,EAWzDA,YACAC,EAZyD,EAYzDA,WAOF,OACE,mBAAKzB,IAAKe,GACR,YAAC,EAAD,CACEhB,MAAOuB,EACPlB,OAAQX,EAAYkC,IACpB7B,KAAMN,EAAUoC,UAElB,YAAC,EAAD,CACE7B,MAAOyB,EACPpB,OAAQX,EAAYoC,OACpB/B,KAAMN,EAAUoC,UAElB,YAAC,EAAD,CACE7B,MAAO0B,EACPrB,OAAQX,EAAYqC,MACpBhC,KAAMN,EAAUoC,UAElB,uBACA,sBAAQ5B,IAAKgB,EAAWe,QAtBZ,SAACC,GACfZ,EAAaf,KAqBX,gBAOA4B,EAAqBjC,YAAH,KAClBkC,EAAkB,WACtB,OACE,mBAAKlC,IAAKiC,GACR,YAAC,EAAD,CACElC,MAAOL,EAAWQ,GAClBE,OAAQX,EAAYkC,IACpB7B,KAAMN,EAAUS,aAElB,YAAC,EAAD,CACEF,MAAOL,EAAW6B,IAClBnB,OAAQX,EAAYqC,MACpBhC,KAAMN,EAAUS,eEzETkC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAActC,KAAMN,EAAUoC,UAC9B,2BACE,2DCCUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0841e77d.chunk.js","sourcesContent":["export enum TrafficState {\n  flowing = 'flowing',\n  stopping = 'stopping',\n  stopped = 'stopped',\n}\n\nexport interface TrafficLightState {\n  redState: LightState;\n  orangeState: LightState;\n  greenState: LightState;\n}\n\nexport enum LightType {\n  traffic = 'traffic',\n  pedestrian = 'pedestrian',\n}\n\nexport enum LightColour {\n  red = 'red',\n  orange = 'orange',\n  green = 'green',\n}\n\nexport enum LightState {\n  on = 'on',\n  blinking = 'blinking',\n  off = 'off',\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { LightType, LightState, LightColour } from '../../state/types';\n\ninterface LightProps {\n  type: LightType;\n  state: LightState;\n  colour: LightColour;\n}\n\nconst lightContainerCSS = ({\n  bgColor,\n  type,\n  state,\n}: {\n  bgColor: LightColour;\n  type: LightType;\n  state: LightState;\n}) => css`\n  border-radius: ${type === LightType.pedestrian ? 5 : 9999}px;\n  opacity: ${state === LightState.on ? 100 : 20}%;\n  border: 2px solid black;\n  width: 50px;\n  height: 50px;\n  background-color: ${bgColor};\n`;\n\nexport const Light = ({ state, type, colour }: LightProps) => {\n  return <div css={lightContainerCSS({ bgColor: colour, type, state })}></div>;\n};\n","enum Transition {\n  toggle = 'TRANSITION',\n}\nexport const TRANSITION = Transition.toggle;\n","import { Machine } from 'xstate';\nimport { TrafficState } from './types';\nimport { TRANSITION } from './constants';\n\nexport const crossRoads = Machine({\n  id: 'crossRoads',\n  initial: TrafficState.stopped,\n  states: {\n    [TrafficState.stopped]: {\n      on: { [TRANSITION]: TrafficState.flowing },\n    },\n    [TrafficState.flowing]: {\n      on: { [TRANSITION]: TrafficState.stopping },\n    },\n    [TrafficState.stopping]: {\n      on: {\n        [TRANSITION]: TrafficState.stopped,\n      },\n    },\n  },\n});\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { Light } from '../Light/Light';\nimport {\n  LightType,\n  LightState,\n  LightColour,\n  TrafficState,\n} from '../../state/types';\nimport { mapTrafficStateToTrafficLightState } from '../../state/utils';\nimport { useMachine } from '@xstate/react';\nimport { crossRoads } from '../../state/machine';\nimport { TRANSITION } from '../../state/constants';\n\ninterface TrafficLightProps {\n  type: LightType;\n}\n\nconst TrafficLightCSS = css`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonCSS = css`\n  background-color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 16px;\n  font-size: 16px;\n  line-height: 16px;\n  cursor: pointer;\n`;\n\nexport const TrafficLight = ({ type }: TrafficLightProps) => {\n  const [trafficState, onTransition] = useMachine<TrafficState, any>(\n    crossRoads,\n  );\n\n  if (type === LightType.pedestrian) {\n    return <PedestrianLight />;\n  }\n\n  const {\n    redState,\n    orangeState,\n    greenState,\n  } = mapTrafficStateToTrafficLightState(trafficState);\n\n  const onClick = (event: any) => {\n    onTransition(TRANSITION);\n  };\n\n  return (\n    <div css={TrafficLightCSS}>\n      <Light\n        state={redState}\n        colour={LightColour.red}\n        type={LightType.traffic}\n      />\n      <Light\n        state={orangeState}\n        colour={LightColour.orange}\n        type={LightType.traffic}\n      />\n      <Light\n        state={greenState}\n        colour={LightColour.green}\n        type={LightType.traffic}\n      />\n      <br />\n      <button css={ButtonCSS} onClick={onClick}>\n        Transition\n      </button>\n    </div>\n  );\n};\n\nconst PedestrianLightCSS = css``; // TODO\nconst PedestrianLight = () => {\n  return (\n    <div css={PedestrianLightCSS}>\n      <Light\n        state={LightState.on}\n        colour={LightColour.red}\n        type={LightType.pedestrian}\n      />\n      <Light\n        state={LightState.off}\n        colour={LightColour.green}\n        type={LightType.pedestrian}\n      />\n    </div>\n  );\n};\n","import { TrafficLightState, TrafficState, LightState } from './types';\nimport { State } from 'xstate';\n\nexport const mapTrafficStateToTrafficLightState = (\n  trafficState: State<TrafficState, any, any, any>,\n): TrafficLightState => {\n  const { value } = trafficState;\n  return {\n    redState: value === TrafficState.stopped ? LightState.on : LightState.off,\n    orangeState:\n      value === TrafficState.stopping ? LightState.on : LightState.off,\n    greenState: value === TrafficState.flowing ? LightState.on : LightState.off,\n  };\n};\n","import React from 'react';\nimport './App.css';\nimport { TrafficLight } from './components/TrafficLight/TrafficLight';\nimport { LightType } from './state/types';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TrafficLight type={LightType.traffic} />\n        <p>\n          <code>XState Traffic Lights</code>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}